<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Linux on Krishna&#39;s Webplace</title>
    <link>http://localhost:1313/tags/linux/</link>
    <description>Recent content in Linux on Krishna&#39;s Webplace</description>
    <generator>Hugo -- 0.144.2</generator>
    <language>en</language>
    <lastBuildDate>Thu, 20 Feb 2025 14:02:45 +0530</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ZRAM in WSL2</title>
      <link>http://localhost:1313/posts/zram-in-wsl2/</link>
      <pubDate>Thu, 20 Feb 2025 14:02:45 +0530</pubDate>
      <guid>http://localhost:1313/posts/zram-in-wsl2/</guid>
      <description>&lt;p&gt;If you have been using WSL2 on Windows, you would be quite surprised and satisfied at the same time for how well it works as a Linux CLI.&lt;/p&gt;
&lt;p&gt;And so was I, because it allows you the convenience of Windows + the flexibility of Linux systems. It acts as a bridge between the two, and you can run Linux commands on Windows, and Windows commands on Linux.&lt;/p&gt;
&lt;p&gt;For this reason, I use it to build custom ROMs for my Android devices. But with Android 15, the system requirements have been upped from 32gb to 64gb, and I have only 32gb of RAM on my desktop.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>If you have been using WSL2 on Windows, you would be quite surprised and satisfied at the same time for how well it works as a Linux CLI.</p>
<p>And so was I, because it allows you the convenience of Windows + the flexibility of Linux systems. It acts as a bridge between the two, and you can run Linux commands on Windows, and Windows commands on Linux.</p>
<p>For this reason, I use it to build custom ROMs for my Android devices. But with Android 15, the system requirements have been upped from 32gb to 64gb, and I have only 32gb of RAM on my desktop.</p>
<p>When I used to run Ubuntu, I used to use ZRAM to compress the memory and this allowed me to build A15. So I thought, why not use ZRAM in WSL2 as well?</p>
<p>But ZRAM is a kernel module, and WSL2 doesn&rsquo;t have it built into the Linux kernel version 5.15.167.4-microsoft-standard-WSL2. So I had to find a workaround for this.</p>
<p>First I tried modinfo zram, but it returned modinfo: ERROR: Module zram not found. But if you have it listed, try to load it with modprobe zram.</p>
<p>But in my case, I had to build a custom kernel with ZRAM enabled. So I followed the steps below:</p>
<ol>
<li>First install the required packages in WSL2 to build the kernel:</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo apt install build-essential flex bison dwarves libssl-dev libelf-dev cpio bc zstd -y
</span></span></code></pre></div><ol start="2">
<li>Then clone the Linux kernel source code from the official Microsoft repository:</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git clone --depth<span class="o">=</span><span class="m">1</span> https://github.com/microsoft/WSL2-Linux-Kernel.git
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> WSL2-Linux-Kernel
</span></span></code></pre></div><ol start="3">
<li>Now we must modify the kernel config to enable ZRAM. (But remember not to do so with the provided 6.6 kernel config in Microsoft/config-wsl.config, as that is known to break Docker, if you are using it with WSL2. If you don&rsquo;t use docker, you can simply copy that to working directory and rename it to .config, else follow as I am doing). Run:</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -o .config https://raw.githubusercontent.com/microsoft/WSL2-Linux-Kernel/refs/heads/linux-msft-wsl-6.1.y/arch/x86/configs/config-wsl
</span></span></code></pre></div><p>This gets the 6.1 kernel config that is known to also work with Docker desktop.</p>
<ol start="4">
<li>Then let&rsquo;s fire up the gui based kernel configuration tool:</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">make menuconfig
</span></span></code></pre></div><ol start="5">
<li>This should open the menu. Navigate to the following place to enable ZSTD [or any other compression algorithm you prefer]:</li>
</ol>
<p>Crypto API → Compression → &lt;<em>&gt; ZSTD compression algorithm
Cryptographic API &mdash;&gt;
Compression &mdash;&gt;
&lt;</em>&gt; zstd</p>
<figure class="align-center ">
    <img loading="lazy" src="/img/list_Webcam.png#center"/> 
</figure>

<ol start="6">
<li>Go back to the main menu and navigate to the following place to enable ZRAM:</li>
</ol>
<p>Device Drivers  &mdash;&gt;
[<em>] Block devices  &mdash;&gt;
&lt;</em>&gt; Compressed RAM block device support
[<em>] Write back incompressible or idle page to backing device
[</em>] Track zRam block status</p>
<p>Make sure to Change “Compressed RAM block device support” from M to *, if it was previously set to M. To change it, simply press ‘Y’ at this option. M means a kernel module that can be loaded separately, and &lsquo;Y&rsquo; means that it will be built-in. In WSL2 Loadable module support is disabled when using a custom built kernel. We must set any modules to be built-in before building.</p>
<ol start="7">
<li>In this same place under &ldquo;Compressed RAM block device support&rdquo;, you can also set the compression algorithm via the submenu &ldquo;Default ZRAM compressor&rdquo;. I set it to ZSTD.</li>
</ol>
<figure class="align-center ">
    <img loading="lazy" src="/img/list_Webcam.png#center"/> 
</figure>

<ol start="8">
<li>Finally save the config from bottom menu panel and exit. Let us now compile the kernel with:</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">make -j<span class="k">$(</span>nproc<span class="k">)</span>
</span></span></code></pre></div><p>This will take some time, so be patient. After it is done, we can find the compilled kernel in the arch/x86/boot/ directory. It will be named as <strong>bzImage</strong>.</p>
<ol start="9">
<li>Open the Windows file explorer and navigate to the WSL2 directory where you have the kernel compiled. Then copy the kernel to the Windows directory:</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">cp arch/x86/boot/bzImage /mnt/c/Users/&lt;Your Windows Username&gt;/Downloads/
</span></span></code></pre></div><p>Now we can move this image anywhere we want. I created a folder named &lsquo;.wsl-kernel&rsquo; in my C:\Users&lt;Username&gt; directory and moved it there.</p>
<ol start="10">
<li>The WSL2 kernel must also be overwritten with this new kernel. Simply go to the C:\Users&lt;Username&gt; location and create a .wslconfig file with the following content:</li>
</ol>
<p>[wsl2]
kernel=C:\Users\<!-- raw HTML omitted -->\.wsl-kernel\bzImage</p>
<ol start="11">
<li>Now we have to restart the WSL2 instance. You can do so by running:</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="n">wsl</span> <span class="err">–</span><span class="n">shutdown</span>
</span></span><span class="line"><span class="cl"><span class="n">wsl</span>
</span></span></code></pre></div><p>Check the kernel version by running this command to verify that it is the one you compiled:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">uname -sr
</span></span></code></pre></div><p>It should show the latest kernel version that you compiled. For example it shows me <strong>Linux 6.6.36.6-microsoft-standard-WSL2</strong>.</p>
<ol start="12">
<li>Although you have loaded the kernel, if you try checking for the zram module using modinfo, it will still not be there. We must first install the modules we built. Run this from the git repository we cloned:</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo make modules_install
</span></span><span class="line"><span class="cl"><span class="c1">#Now load them:</span>
</span></span><span class="line"><span class="cl">sudo modprobe
</span></span></code></pre></div><ol start="13">
<li>If we now check for the zram module, it should be there. You can also check the zram devices with:</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">modinfo zram
</span></span></code></pre></div><ol start="14">
<li>Now, we must enable zram to be accessible always on boot, i.e., make it persistent. To do so, we must create a systemd service. Run:</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo nano /etc/systemd/system/zram.service
</span></span></code></pre></div><p>Add the following content to the file:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1">###REMEMBER! Change the 1G in ExecStart to whatever size of zram block device you wish to create.</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>Unit<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="nv">Description</span><span class="o">=</span>Enable ZRAM Swap
</span></span><span class="line"><span class="cl"><span class="nv">After</span><span class="o">=</span>multi-user.target
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>Service<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="nv">Type</span><span class="o">=</span>oneshot
</span></span><span class="line"><span class="cl"><span class="nv">ExecStart</span><span class="o">=</span>/bin/bash -c <span class="s2">&#34;echo 1G &gt; /sys/block/zram0/disksize &amp;&amp; mkswap /dev/zram0 &amp;&amp; swapon /dev/zram0 -p 10&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">RemainAfterExit</span><span class="o">=</span><span class="nb">true</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>Install<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="nv">WantedBy</span><span class="o">=</span>multi-user.target
</span></span></code></pre></div><p>Enable the service with:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo systemctl <span class="nb">enable</span> zram.service
</span></span><span class="line"><span class="cl">sudo systemctl start zram.service
</span></span></code></pre></div><p><strong>Now ZRAM should be enabled and working on your WSL2 instance.</strong></p>
]]></content:encoded>
    </item>
    <item>
      <title>Whatsapp Without Phone</title>
      <link>http://localhost:1313/posts/whatsapp-without-phone/</link>
      <pubDate>Wed, 29 May 2024 20:43:23 +0530</pubDate>
      <guid>http://localhost:1313/posts/whatsapp-without-phone/</guid>
      <description>&lt;p&gt;I had stopped using whatsapp because I didn&amp;rsquo;t want to have it&amp;rsquo;s proprietary app on my de-googled device.&lt;/p&gt;
&lt;h3 id=&#34;the-issue&#34;&gt;The Issue&lt;/h3&gt;
&lt;p&gt;But you see, this application is used by most of my academic professors and other colleages, so I had to somehow use it (without the app on my phone, of course).&lt;/p&gt;
&lt;p&gt;So I thought of running it through some android emulator, but didn&amp;rsquo;t want to natively run it on my linux machine. [No waydroid as I run X11]&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>I had stopped using whatsapp because I didn&rsquo;t want to have it&rsquo;s proprietary app on my de-googled device.</p>
<h3 id="the-issue">The Issue</h3>
<p>But you see, this application is used by most of my academic professors and other colleages, so I had to somehow use it (without the app on my phone, of course).</p>
<p>So I thought of running it through some android emulator, but didn&rsquo;t want to natively run it on my linux machine. [No waydroid as I run X11]</p>
<p>Thus I installed Windows 10 through virtual box and then installed bluestacks in it. But bluestacks was not starting properly (issues with virtualization), which I solved via virtualbox settings.</p>
<figure class="align-center ">
    <img loading="lazy" src="/img/enable_virt.png#center"
         alt="Had to enable the above 2 options to get virtualization working."/> <figcaption>
            <p>Had to enable the above 2 options to get virtualization working.</p>
        </figcaption>
</figure>

<p><em>If this still doesn&rsquo;t work for you, I think you should also enable Virtualization and Hyper-V support from &ldquo;Turn on windows features&rdquo; from within your Windows VM.</em></p>
<p>After this, bluestacks started working normally and I installed whatsapp in it and logged in to my account <em>[A strange thing was that all my chats and groups were gone, but maybe that was because I was logging in after around 1 month].</em></p>
<p>My next major work was to get whatsapp web working, so that I could use it on my other devices (of course, not going to run the emulator each time I have to use it).</p>
<p>To do so, whatsapp requires web versions to have their QR code scanned by the whatsapp application for login, so I used a usb camera that I had with me, but I got this error when I tried to use the webcam in my Windows VM:</p>
<figure class="align-center ">
    <img loading="lazy" src="/img/cam_notFound_big.png#center"/> 
</figure>

<p>It required a &ldquo;Webcam Passthrough&rdquo;, so that the VM instance could access the USB camera.</p>
<h3 id="steps-to-allow-webcam-passthrough-credits">Steps to allow Webcam Passthrough [<a href="https://askubuntu.com/a/1237808">Credits</a>]:</h3>
<ol>
<li>
<p>First install certain extra packages to get stuff working:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo apt-get install virtualbox-guest-additions-iso virtualbox-ext-pack
</span></span></code></pre></div></li>
<li>
<p>Next, we need to find our webcam details using this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">VBoxManage list webcams
</span></span></code></pre></div><p>This should show us a list of (for me only 1) webcam/s attached to your host device.</p>
</li>
<li>
<p>Now finally we need to connect this webcam to enable passthrough. Issue this command, by replacing the word <strong>Windows</strong> with the name of your VM instance and the .1 with the number that corresponds to your webcam as listed in step 2 (in most cases, it should be .1):</p>
<p><em><strong>NOTE: This command must be run only when your windows VM is running.</strong></em></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">VBoxManage controlvm <span class="s2">&#34;Windows&#34;</span> webcam attach .1
</span></span></code></pre></div></li>
</ol>
<figure class="align-center ">
    <img loading="lazy" src="/img/list_Webcam.png#center"/> 
</figure>

<p><em>NOTE: If you shutdown or restart your VM, it will loose access to the camera. You need to re-run the step 3 command to get it working.</em></p>
<h3 id="conclusion">Conclusion</h3>
<p>With this much, my VM was able to detect the webcam and without much difficulty, I was able to register with the whatsapp web version on my devices.</p>
<p>A small caveat though, remember to open the whatsapp in your windows VM every 14 days to avoid getting logged out of your whatsapp web devices.</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
