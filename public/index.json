[{"content":"If you have been using WSL2 on Windows, you would be quite surprised and satisfied at the same time for how well it works as a Linux CLI.\nAnd so was I, because it allows you the convenience of Windows + the flexibility of Linux systems. It acts as a bridge between the two, and you can run Linux commands on Windows, and Windows commands on Linux.\nFor this reason, I use it to build custom ROMs for my Android devices. But with Android 15, the system requirements have been upped from 32gb to 64gb, and I have only 32gb of RAM on my desktop.\nWhen I used to run Ubuntu, I used to use ZRAM to compress the memory and this allowed me to build A15. So I thought, why not use ZRAM in WSL2 as well?\nBut ZRAM is a kernel module, and WSL2 doesn\u0026rsquo;t have it built into the Linux kernel version 5.15.167.4-microsoft-standard-WSL2. So I had to find a workaround for this.\nFirst I tried modinfo zram, but it returned modinfo: ERROR: Module zram not found. But if you have it listed, try to load it with modprobe zram.\nBut in my case, I had to build a custom kernel with ZRAM enabled. So I followed the steps below:\nFirst install the required packages in WSL2 to build the kernel: sudo apt install build-essential flex bison dwarves libssl-dev libelf-dev cpio bc zstd -y Then clone the Linux kernel source code from the official Microsoft repository: git clone --depth=1 https://github.com/microsoft/WSL2-Linux-Kernel.git cd WSL2-Linux-Kernel Now we must modify the kernel config to enable ZRAM. (But remember not to do so with the provided 6.6 kernel config in Microsoft/config-wsl.config, as that is known to break Docker, if you are using it with WSL2. If you don\u0026rsquo;t use docker, you can simply copy that to working directory and rename it to .config, else follow as I am doing). Run: curl -o .config https://raw.githubusercontent.com/microsoft/WSL2-Linux-Kernel/refs/heads/linux-msft-wsl-6.1.y/arch/x86/configs/config-wsl This gets the 6.1 kernel config that is known to also work with Docker desktop.\nThen let\u0026rsquo;s fire up the gui based kernel configuration tool: make menuconfig This should open the menu. Navigate to the following place to enable ZSTD [or any other compression algorithm you prefer]: Crypto API → Compression → \u0026lt;*\u0026gt; ZSTD compression algorithm Cryptographic API ---\u0026gt; Compression ---\u0026gt; \u0026lt;*\u0026gt; zstd Go back to the main menu and navigate to the following place to enable ZRAM: Device Drivers ---\u0026gt; [*] Block devices ---\u0026gt; \u0026lt;*\u0026gt; Compressed RAM block device support [*] Write back incompressible or idle page to backing device [*] Track zRam block status Make sure to Change “Compressed RAM block device support” from M to *, if it was previously set to M. To change it, simply press ‘Y’ at this option. M means a kernel module that can be loaded separately, and \u0026lsquo;Y\u0026rsquo; means that it will be built-in. In WSL2 Loadable module support is disabled when using a custom built kernel. We must set any modules to be built-in before building.\nIn this same place under \u0026ldquo;Compressed RAM block device support\u0026rdquo;, you can also set the compression algorithm via the submenu \u0026ldquo;Default ZRAM compressor\u0026rdquo;. I set it to ZSTD. Finally save the config from bottom menu panel and exit. Let us now compile the kernel with: make -j$(nproc) This will take some time, so be patient. After it is done, we can find the compilled kernel in the arch/x86/boot/ directory. It will be named as bzImage.\nOpen the Windows file explorer and navigate to the WSL2 directory where you have the kernel compiled. Then copy the kernel to the Windows directory: cp arch/x86/boot/bzImage /mnt/c/Users/\u0026lt;Your Windows Username\u0026gt;/Downloads/ Now we can move this image anywhere we want. I created a folder named \u0026lsquo;.wsl-kernel\u0026rsquo; in my C:\\Users\u0026lt;Username\u0026gt; directory and moved it there.\nThe WSL2 kernel must also be overwritten with this new kernel. Simply go to the C:\\Users\u0026lt;Username\u0026gt; location and create a .wslconfig file with the following content: [wsl2] kernel=C:\\\\Users\\\\\u0026lt;Username\u0026gt;\\\\.wsl-kernel\\\\bzImage Now we have to restart the WSL2 instance. You can do so by running: wsl –shutdown wsl Check the kernel version by running this command to verify that it is the one you compiled:\nuname -sr It should show the latest kernel version that you compiled. For example it shows me Linux 6.6.36.6-microsoft-standard-WSL2.\nAlthough you have loaded the kernel, if you try checking for the zram module using modinfo, it will still not be there. We must first install the modules we built. Run this from the git repository we cloned: sudo make modules_install #Now load them: sudo modprobe If we now check for the zram module, it should be there. You can also check the zram devices with: modinfo zram Now, we must enable zram to be accessible always on boot, i.e., make it persistent. To do so, we must create a systemd service. Run: sudo nano /etc/systemd/system/zram.service Add the following content to the file:\n###REMEMBER! Change the 1G in ExecStart to whatever size of zram block device you wish to create. [Unit] Description=Enable ZRAM Swap After=multi-user.target [Service] Type=oneshot ExecStart=/bin/bash -c \u0026#34;echo 1G \u0026gt; /sys/block/zram0/disksize \u0026amp;\u0026amp; mkswap /dev/zram0 \u0026amp;\u0026amp; swapon /dev/zram0 -p 10\u0026#34; RemainAfterExit=true [Install] WantedBy=multi-user.target Enable the service with:\nsudo systemctl enable zram.service sudo systemctl start zram.service Now ZRAM should be enabled and working on your WSL2 instance.\n","permalink":"https://krishnayadav.xyz/posts/zram-in-wsl2/","summary":"\u003cp\u003eIf you have been using WSL2 on Windows, you would be quite surprised and satisfied at the same time for how well it works as a Linux CLI.\u003c/p\u003e\n\u003cp\u003eAnd so was I, because it allows you the convenience of Windows + the flexibility of Linux systems. It acts as a bridge between the two, and you can run Linux commands on Windows, and Windows commands on Linux.\u003c/p\u003e\n\u003cp\u003eFor this reason, I use it to build custom ROMs for my Android devices. But with Android 15, the system requirements have been upped from 32gb to 64gb, and I have only 32gb of RAM on my desktop.\u003c/p\u003e","title":"ZRAM in WSL2"},{"content":"I finally setup my Ubuntu server quite well along with wifi drivers.\nNext up, I had to install Nextcloud, because I wanted a cloud storage that could backup and sync photos, videos and other stuff from several devices at my home. Thus I looked up a tutorial on it and found one by Jay, which was extremely easy to follow and helped me setup my Nextcloud instance from scratch.\nThe steps to setup Nextcloud You should be using a normal user account, and should not be executing the commands as \u0026lsquo;root\u0026rsquo;. In case you are \u0026lsquo;root\u0026rsquo;, simply execute the following:\nadduser \u0026lt;Enter your desired username here\u0026gt; usermod -aG sudo \u0026lt;Enter the username you set above\u0026gt; Update the system\u0026rsquo;s cache and also apply any pending updates with the following command:\nsudo apt update \u0026amp;\u0026amp; sudo apt dist-upgrade Now, let us download and install php, mariadb and apache (along with some additional dependencies and required packages):\nsudo apt install libmagickcore-6.q16-6-extra php php-apcu php-bcmath php-cli php-common php-curl php-gd php-gmp php-imagick php-intl php-mbstring php-mysql php-zip php-xml apache2 unzip mariadb-server redis-server php-redis -y Note: You can check if apache is running [Should be active and enabled] with:\nsystemctl status apache2 Download and unzip nextcloud with:\nwget https://download.nextcloud.com/server/releases/latest.zip unzip latest.zip We will now change the ownership of nextcloud to the group and user \u0026lsquo;www-data\u0026rsquo; and move the nextcloud folder into the \u0026lsquo;/var/www/\u0026rsquo; directory as SOP. The \u0026lsquo;www-data\u0026rsquo; is a user (and group) created by default when we installed apache2. The -R flag changes ownership of all files and folders within the nextcloud directory recursively.\nsudo chown www-data:www-data -R nextcloud sudo mv nextcloud /var/www/ PHP needs some modules to be enabled for it\u0026rsquo;s functioning. Do so with:\nsudo phpenmod imagick intl bcmath gmp Let us start configuring database, which is required to base our Nextcloud on. We must first run a setup of mysql to secure our installation. To do so, run:\nsudo mysql_secure_installation It will open a bash asking you to fill certain details.\nThe first prompt will be asking for default root password, just press Enter button to skip this option. Next it will ask for Unix socket, type \u0026rsquo;n\u0026rsquo; and proceed. Then it will ask to enter a password, type \u0026lsquo;y\u0026rsquo; and then enter a password (store it securely). Just keep pressing Enter button to skip through rest of the options (Capital letter means default option, \u0026lsquo;Y\u0026rsquo; in all these options). Once done with this, we must now configure mariadb. Open it\u0026rsquo;s shell by:\nsudo mariadb In this shell, type these commands (replace where marked):\nCREATE DATABASE nextcloud; GRANT ALL PRIVILEGES ON nextcloud.* TO 'nextcloud'@'localhost' IDENTIFIED BY \u0026lt;'Enter a secure password here for the db. Do keep the password inside single inverted commas.'\u0026gt;; FLUSH PRIVILEGES; exit; NOTE: Store this password very securely, as it can be misused if leaked.\nWe should now generate our own SSL/TLS certificate to use with our server (In case you have a static IP, you should use Let\u0026rsquo;s encrypt\u0026rsquo;s certificate using Certbot)\nNOTE: This command will ask you several question. Answer whatever you want to fill in (won\u0026rsquo;t have much effect).\nmkdir $HOME/certs \u0026amp;\u0026amp; cd $HOME/certs/ openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 3650 -nodes NOTE: Please store both the key.pem and cert.pem somewhere secured. Also import cert.pem as an Authorities certificate in your browser to avoid the browser from flagging our nextcloud instance as a \u0026lsquo;Not Secure\u0026rsquo; website everytime we visit it.\nNow we must disable the default webpage of apache, place our config file in the apache directory and enable the config for apache to load the nextcloud page (Along with adding Strict Transport Security).\nsudo a2dissite 000-default.conf sudo nano /etc/apache2/sites-available/nextcloud.conf In the text editor which opens, paste the following code:\n\u0026lt;VirtualHost *:80\u0026gt; RewriteEngine On RewriteCond %{SERVER_PORT} !443 RewriteRule ^(/(.*))?$ https://%{HTTP_HOST}/$1 [R=301,L] \u0026lt;/VirtualHost\u0026gt; \u0026lt;VirtualHost *:443\u0026gt; DocumentRoot \u0026#34;/var/www/nextcloud\u0026#34; SSLCertificateFile $HOME/certs/cert.pem SSLCertificateKeyFile $HOME/certs/key.pem SSLEngine on \u0026lt;Directory \u0026#34;/var/www/nextcloud/\u0026#34;\u0026gt; Options MultiViews FollowSymlinks AllowOverride All Order allow,deny Allow from all \u0026lt;/Directory\u0026gt; TransferLog /var/log/apache2/nextcloud_access.log ErrorLog /var/log/apache2/nextcloud_error.log \u0026lt;IfModule mod_headers.c\u0026gt; Header always set Strict-Transport-Security \u0026#34;max-age=15552000; includeSubDomains\u0026#34; \u0026lt;/IfModule\u0026gt; \u0026lt;/VirtualHost\u0026gt; Save this file by doing ctrl+o and ctrl+x. Then enable this config file using:\nsudo a2ensite nextcloud.conf Let us tune PHP to make our server run more efficiently:\nNote: PHP versions can differ on different distributions, like 8.3 on Ubuntu 24 LTS and 8.1 on 22 LTS, thus press tab as directed below:\nsudo nano /etc/php/\u0026lt;press tab to autocomplete here\u0026gt;/apache2/php.ini Find and edit the file by change stuff inside it according to this (Replace the areas where you see fit. To remove a comment, remove the \u0026lsquo;;\u0026rsquo; semi-colon in front of the line in the file):\nmemory_limit = 2G upload_max_filesize = 20G max_execution_time = 360 post_max_size = 20G date.timezone = Asia/Kolkata opcache.enable=1 opcache.interned_strings_buffer=16 opcache.max_accelerated_files=10000 opcache.memory_consumption=128 opcache.save_comments=1 opcache.revalidate_freq=1 Some modules are required by apache2, so enable them for use with nextcloud.\nsudo a2enmod dir env headers mime rewrite ssl Enable the apcu module in php. This module caches data in memory, so helps in reducing database queries and file system operations. This also allows the occ script to function.\nNote: PHP versions can differ on different distributions, like 8.3 on Ubuntu 24 LTS and 8.1 on 22 LTS, thus press tab as directed below:\necho \u0026#34;apc.enable_cli=1\u0026#34; | sudo tee -a /etc/php/\u0026lt;press tab here\u0026gt;/mods-available/apcu.ini Finally, let us restart apache2 to get nextcloud working:\nsudo systemctl restart apache2 Let\u0026rsquo;s configure nextcloud via its webpage Create an administrator account in the webpage that opens when you visit the IP address / URL that you attached to the server. Then when you scroll down, it will ask for your database details. Fill according to what you entered in the above steps (db account and name should be \u0026rsquo;nextcloud\u0026rsquo; and password will be the one you entered while configuring mariadb, step 7).\nSign in and setup nextcloud as you like. Next, head over to the Admin settings by clicking on your profile on top right side and then on \u0026ldquo;Administration settings\u0026rdquo;.\nIn here, you will see the various issues that nextcloud has automatically detected with the installation.\nSome of the errors that I had received and their solutions: If you get a very big error which states that the database is missing some indices, simply do as follows:\nsudo chmod +x /var/www/nextcloud/occ sudo -u \u0026#39;www-data\u0026#39; /var/www/nextcloud/occ db:add-missing-indices sudo chmod -x /var/www/nextcloud/occ This adds the missing indices using occ script provided by nextcloud themselves, which helps in correcting issues with nextcloud.\nEnable memory caching:\nsudo nano /var/www/nextcloud/config/config.php In the text editor which opens, add the following line somewhere in between the other lines (before the closing bracktes atleast):\n\u0026lsquo;memcache.local\u0026rsquo; =\u0026gt; \u0026lsquo;\\OC\\Memcache\\APCu\u0026rsquo;, \u0026lsquo;default_phone_region\u0026rsquo; =\u0026gt; \u0026lsquo;IN\u0026rsquo;, NOTE: Replace phone region code to whatever your region code is. Also, remember to have those commas in the end of each of the above 2 lines.\nAdditional security parameter is to lock down the config.php file to root group, as it contains sensitive information like our database password.\nsudo chmod 660 /var/www/nextcloud/config/config.php sudo chown root:www-data /var/www/nextcloud/config/config.php Conclusion After doing this much, you can restart apache and/or even reboot your system once.\nNow I think you will be good to go with your own personal cloud storage. Remember to keep your system updated and files backed up (try to follow 3-2-1 rule) to be safe.\n","permalink":"https://krishnayadav.xyz/posts/ubuntu-server-setup-part-2-installing-nextcloud/","summary":"\u003cp\u003eI finally setup my Ubuntu server quite well along with wifi drivers.\u003c/p\u003e\n\u003cp\u003eNext up, I had to install Nextcloud, because I wanted a cloud storage that could backup and sync photos, videos and other stuff from several devices at my home. Thus I looked up a tutorial on it and found one by Jay, which was extremely easy to follow and helped me setup my Nextcloud instance from scratch.\u003c/p\u003e\n\u003ch3 id=\"the-steps-to-setup-nextcloud\"\u003eThe steps to setup Nextcloud\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eYou should be using a normal user account, and should not be executing the commands as \u0026lsquo;root\u0026rsquo;. In case you are \u0026lsquo;root\u0026rsquo;, simply execute the following:\u003c/p\u003e","title":"Ubuntu Server Setup Part 2: Installing Nextcloud"},{"content":"I had stopped using whatsapp because I didn\u0026rsquo;t want to have it\u0026rsquo;s proprietary app on my de-googled device.\nThe Issue But you see, this application is used by most of my academic professors and other colleages, so I had to somehow use it (without the app on my phone, of course).\nSo I thought of running it through some android emulator, but didn\u0026rsquo;t want to natively run it on my linux machine. [No waydroid as I run X11]\nThus I installed Windows 10 through virtual box and then installed bluestacks in it. But bluestacks was not starting properly (issues with virtualization), which I solved via virtualbox settings.\nHad to enable the above 2 options to get virtualization working.\nIf this still doesn\u0026rsquo;t work for you, I think you should also enable Virtualization and Hyper-V support from \u0026ldquo;Turn on windows features\u0026rdquo; from within your Windows VM.\nAfter this, bluestacks started working normally and I installed whatsapp in it and logged in to my account [A strange thing was that all my chats and groups were gone, but maybe that was because I was logging in after around 1 month].\nMy next major work was to get whatsapp web working, so that I could use it on my other devices (of course, not going to run the emulator each time I have to use it).\nTo do so, whatsapp requires web versions to have their QR code scanned by the whatsapp application for login, so I used a usb camera that I had with me, but I got this error when I tried to use the webcam in my Windows VM:\nIt required a \u0026ldquo;Webcam Passthrough\u0026rdquo;, so that the VM instance could access the USB camera.\nSteps to allow Webcam Passthrough [Credits]: First install certain extra packages to get stuff working:\nsudo apt-get install virtualbox-guest-additions-iso virtualbox-ext-pack Next, we need to find our webcam details using this:\nVBoxManage list webcams This should show us a list of (for me only 1) webcam/s attached to your host device.\nNow finally we need to connect this webcam to enable passthrough. Issue this command, by replacing the word Windows with the name of your VM instance and the .1 with the number that corresponds to your webcam as listed in step 2 (in most cases, it should be .1):\nNOTE: This command must be run only when your windows VM is running.\nVBoxManage controlvm \u0026#34;Windows\u0026#34; webcam attach .1 NOTE: If you shutdown or restart your VM, it will loose access to the camera. You need to re-run the step 3 command to get it working.\nConclusion With this much, my VM was able to detect the webcam and without much difficulty, I was able to register with the whatsapp web version on my devices.\nA small caveat though, remember to open the whatsapp in your windows VM every 14 days to avoid getting logged out of your whatsapp web devices.\n","permalink":"https://krishnayadav.xyz/posts/whatsapp-without-phone/","summary":"\u003cp\u003eI had stopped using whatsapp because I didn\u0026rsquo;t want to have it\u0026rsquo;s proprietary app on my de-googled device.\u003c/p\u003e\n\u003ch3 id=\"the-issue\"\u003eThe Issue\u003c/h3\u003e\n\u003cp\u003eBut you see, this application is used by most of my academic professors and other colleages, so I had to somehow use it (without the app on my phone, of course).\u003c/p\u003e\n\u003cp\u003eSo I thought of running it through some android emulator, but didn\u0026rsquo;t want to natively run it on my linux machine. [No waydroid as I run X11]\u003c/p\u003e","title":"Whatsapp Without Phone"},{"content":"This guide will explain how to sign a Custom ROM build (typically unofficial builds, as most official ROMs are now shipping their own private keys).\nI will use the Lineage wiki guide, but simplify it in my own words at places where I feel this guide did not give more practical information to a new comer like me.\nThe steps to generate the keys are as follows: NOTE: You only need to run this once. If you ever rerun these, you’ll need to migrate between builds.\nGo to the directory where all yours rom files are originally synced (the root of your custom rom files). Now open a terminal and issue this command:\nNOTE: Please note this beforehand that running the following code will ask you to enter password for several keys and several number of times. I will say that just enter 1 password and copy+paste it on all the places where it asks for a password to be entered.\nDO NOTE THIS PASSWORD DOWN, as we will have to use it when we sign the builds.\nsubject=\u0026#39;/C=US/ST=California/L=Mountain View/O=Android/OU=Android/CN=Android/emailAddress=android@android.com\u0026#39; mkdir ~/.android-certs for cert in bluetooth cyngn-app media networkstack platform releasekey sdk_sandbox shared testcert testkey verity; do \\ ./development/tools/make_key ~/.android-certs/$cert \u0026#34;$subject\u0026#34;; \\ done Now we are required to re-sign APEX keys. To do so, simply run the following:\ncp ./development/tools/make_key ~/.android-certs/ sed -i \u0026#39;s|2048|4096|g\u0026#39; ~/.android-certs/make_key Now finally, we must generate our keys. I will strongly recommend you to generate them with a password (re-use the password you used in step 1).\nThe command to run is in here\nNOTE: If you have issues following up with these steps, I have a script that will execute the commands for you (of course, you have to manually enter the password for each keys). You can find that script here\nUsage (copy paste this in terminal):\ncurl -O https://raw.githubusercontent.com/ObsidianMaximus/scripts/master/signing/Generate_Keys.sh bash Generate_Keys.sh Now, the steps to make a .zip flashable package are as follows: Source the envsetup.sh by executing this command:\nsource build/envsetup.sh Now finally, we will have to start compiling the files for our custom ROM (this will take a long time, depending on your computer\u0026rsquo;s specs). To do so, run the following command (replacing the codename with your device codename):\nbreakfast \u0026lt;codename\u0026gt; mka target-files-package otatools Now, it is time to sign all of our APKs and APEXes and build the .zip package.\nWe will use 2 environment variables to ease our task, as they will allow us to sign without having to enter the password several times. For that, we must issue these 2 commands in the terminal:\nexport ANDROID_PW_FILE=/path/to/your/password/file export EDITOR=your_preferred_text_editor NOTE: Replace the fields above as required. For the ANDROID_PW_FILE, just create a file somewhere and input its path there. As for the EDITOR variable, choose whichever editor you like (eg. vim, nano, codium, etc).\nNext run the following commands to call the script to start signing:\ncurl -O https://raw.githubusercontent.com/ObsidianMaximus/scripts/master/signing/Sign.sh bash Sign.sh NOTE: This script will invoke a command \u0026ldquo;sign_target_files_apks\u0026rdquo;, which should open the editor which you specified above, but if it does not, then open the file that you had given above in \u0026ldquo;ANDROID_PW_FILE\u0026rdquo; and you should have stuff inside of it with empty spaces in these \u0026ldquo;[[[ ]]]\u0026rdquo; brackets.\nFill the password in this empty space for all the apks [make sure to fill it between the 3 left and 3 right brackets], and then save this file, and re-run the above script by simple doing: bash Sign.sh.\nNOTE: Wait patiently, it can take some time to do all of the above process.\nCongratulations, you have successfully signed the build. Now in case you are wondering where the .zip file is (no, it is not in the usual out/ directory), the .zip is right in the android root tree, where you issued the commands from.\nJust clean flash the signed-ota_update.zip and device integrity should be met now.\nUpdate: Just confirmed that dirty flashing this build over the previous unsigned ROM also works.\n","permalink":"https://krishnayadav.xyz/posts/sign-a-custom-rom-build/","summary":"\u003cp\u003eThis guide will explain how to \u003cstrong\u003esign\u003c/strong\u003e a Custom ROM build (typically unofficial builds, as most official ROMs are now shipping their own private keys).\u003c/p\u003e\n\u003cp\u003eI will use the \u003ca href=\"https://wiki.lineageos.org/signing_builds\"\u003eLineage wiki guide\u003c/a\u003e, but simplify it in my own words at places where I feel this guide did not give more practical information to a new comer like me.\u003c/p\u003e\n\u003ch4 id=\"the-steps-to-generate-the-keys-are-as-follows\"\u003eThe steps to generate the keys are as follows:\u003c/h4\u003e\n\u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e: You only need to run this once. If you ever rerun these, you’ll need to migrate between builds.\u003c/p\u003e","title":"Sign a Custom ROM Build"},{"content":"I was wanting to learn on how to setup my servers and host stuff on them, but to host a server online, one needs to spend some amount of money on them, which i really didn\u0026rsquo;t want to. But then i remembered that i have one old dusty home computer that had been lying in my home since several years, while not really being used anymore.\nSo i decided to use this opportunity to reuse the same computer for my server tasks and in this way, i will be saving up on those server costs that i would have to pay [electricity is cheap here].\nBut i had a hurdle in my path, and that was my old monitor not working, due to which i was unable to get my cpu to give a basic display as it had only VGA output. And well, i couldn\u0026rsquo;t really use this PC with my current monitor, as this monitor supports only HDMI and Display Port. I did have one VGA-to-HDMI converter lying around with me, but that had malfunctioned as well.\nThis had me worried for some time before i thought of just using the gpu in my current setup on the older one. Sadly, this had another issue. The older desktop is an Intel Pentium E5400, and has a motherboard which is of LGA775 socket type. Now, this motherboard has the onboard power supply cables right above the PCIe slot, which rendered me placing my hefty gpu in that slot useless.\nThen i had to think a bit more and got an idea of just taking out the HDD from the old PC and placing it in my working desktop [silly me]. I attached the HDD to my newer PC and started the machine.\nAt first, i went for the trusted server OS, Debian. Flashed it onto my usb drive and tried live booting only to be suprised with no display. Forgot that i had to enable CSM from BIOS and then turn on \u0026ldquo;legacy only\u0026rdquo; mode to allow the usb to boot [had partitioned it as MSDOS/MBR, silly me, again..]. This was again because the older computer had legacy BIOS only and i had to test the current HDD to ensure that it did boot alright under legacy conditions.\nAdjusted boot options and booted the PC only to be met by a weirdly enlarged debian graphical installer. Pressed enter and the PC restarted and i was met with just blurred out lines and teared display with the text not legible at all. Tried rebooting several times from my usb drive but was met with the same issue again and again. Finally got quite frustrated and flashed ubuntu server on the drive.\nBooted from it and to my surprise, it turned on smoothly. At first the screen was enlarged but when i progressed the installation, it auto-adjusted normally and matched my 24\u0026quot; screen resolution quite well. Installed the ubuntu server, which was pretty straight forward, thanks to the KIS ways of Ubuntu.\nThen my next task was getting my wifi modem or should i say TP-Link USB Network Adapter (Archer T2U Plus) in working condition, as i planned to keep the pc in an isolated place. The instructions for the same can be found here. This adapter uses a Realtek RTL8821AU Chipset at its heart, which fortunately has linux drivers available, thanks to aircrack-ng! Executing the commands in the script installed all it\u0026rsquo;s drivers. Now next, i had to enable it and connect to my home network to make the pc accessible by my other devices.\nTo do this, here is an excellent guide from Ubuntu!\nAs for the steps i followed, they were as follow:\nFirstly, i had to install network-manager as it was not present by default on the default server installation [ strange? ]. Next, i ran nmcli d command to get the name of the wifi device. Then, to turn it on, issue: nmcli r wifi on and list all the scanned wifi networks with: nmcli d wifi list To connect to one of the networks listed, you have to type: nmcli d wifi connect \u0026lt;name of the wifi\u0026gt; password \u0026lt;password for that wifi\u0026gt; [Replace stuff within \u0026lt; \u0026gt; with what you have got listed in the above step.] It took several seconds but after that it did get connected to my wifi network! I restarted my pc without the ethernet cable and the wifi did indeed work, although on startup, one of the checks done by systemd made me wait for quite a long time, more on that here. I then took out the HDD and inserted it into my older desktop and sadly, even after it being turned on for several minutes, i had no green led light show up on the wifi usb adapter [which is used to indicate that the modem is in use by the OS], thus, the older pc was not turning on properly and i had no way to get to diagnosing the issue as i just didn\u0026rsquo;t have a display [running it headless].\nI think that I will have to indeed get my monitor repaired to continue on with my experimentations on my newly built home server.\n","permalink":"https://krishnayadav.xyz/posts/ubuntu-server-setup-part-1/","summary":"\u003cp\u003eI was wanting to learn on how to setup my servers and host stuff on them, but to host a server online, one needs to spend some amount of money on them, which i really didn\u0026rsquo;t want to. But then i remembered that i have one old dusty home computer that had been lying in my home since several years, while not really being used anymore.\u003c/p\u003e\n\u003cp\u003eSo i decided to use this opportunity to reuse the same computer for my server tasks and in this way, i will be saving up on those server costs that i would have to pay [electricity is cheap here].\u003c/p\u003e","title":"Ubuntu Server Setup Part-1"},{"content":"Today, I wanted to send a file from my desktop to my android device. I thought of using rsync for this purpose, which is a tool that I use frequently to sync files between my desktop and my laptop.\nI thought of giving it a try and came across this great article that explained just this.\nNOTE: This guide requires both the computer and the Android device to be on the same wifi network.\nThe process to send files from PC to Android Install rsync on termux using the command: apt install rsync and install openssh using the command: apt install openssh. Then setup the internal storage of our Android device to be accessible by termux using the command: termux-setup-storage. Grant termux the permission to access storage when prompted. Now, change the sshd config file to allow termux to use SSH port. Termux does not have the permission to use the default SSH port 22, so we will use 8022 port instead (can use any available port). For doing this, edit the ../usr/etc/ssh/sshd_config file by simply using the command: echo \u0026quot;Port 8022\u0026quot; \u0026gt;\u0026gt; ../usr/etc/ssh/sshd_config Let\u0026rsquo;s get the local ip address of our device by using the command: ifconfig. The ip address should be usually in the end and will be after \u0026ldquo;inet\u0026rdquo; . Or you can just go to Settings app and click on wifi and select the wifi you are connected to and look for the ipv4 address. In either of these 2 cases, the ip address should usually begin with 192.168.xx.xx where x\u0026rsquo;s are to be replaced by your ip address part. Setup a password for the user by using the command: passwd. Finally, we have to start the SSH daemon. To do this, enter this in termux: sshd. For using SSH Open terminal on your pc and type: ssh -p 8022 192.168.xx.xx [where the x\u0026rsquo;s are replaced by your ipv4 address part]. You should now be able to use android terminal through your desktop terminal. For using Rsync Simply enter the command : rsync -e 'ssh -p 8022' \u0026lt;file to transfer from pc\u0026gt; 192.168.xx.xx:/data/data/com.termux/files/home/storage/\nExplanation of some stuff in the above commands :\nThe -e command is used to specify the remote shell to use. For more details, check the manpage of rsync. The x\u0026rsquo;s replace your ipv4 address parts. /data/data/com.termux/files/home/storage/ is the \u0026ldquo;usual\u0026rdquo; path of the main storage in our Android which the user can access, so we are sending the file from our desktop to our Android device\u0026rsquo;s internal storage using this. You can specify some folder to send the file into directly by simply adding the folder after storage/ in the command. If this shows an error message when you try to transfer files, just type: pwd in termux to get your current directory where you wish to send/receive the files and replace output of this command with the path in the step 1 command above after your phone\u0026rsquo;s ip address. This should work in vice-versa as well. Just add the path to copy from Android first and the path to copy to in your desktop after this. Note To avoid entering password all the time while accessing SSH/Rsync, generate a key pair on your pc using the command: ssh-keygen -t ed25519 and then copy it to Android using the command: ssh-copy-id -p 8022 192.168.xx.xx in your desktop terminal. This will ask you password only once and after authenticating it, you can now just use SSH/Rsync without entering that password which we generated in the \u0026ldquo;Step 5\u0026rdquo; in the beginning.\nREMEMBER that the ip address of your android device can change from time to time due to ip addresses being dynamic when using wifi. Or they \u0026ldquo;may\u0026rdquo; change if the router is restarted. In any case, be sure to repeat the \u0026ldquo;Step 4\u0026rdquo; which we did in the beginning to find our local ip address.\n","permalink":"https://krishnayadav.xyz/posts/use-ssh-or-rsync-with-android/","summary":"\u003cp\u003eToday, I wanted to send a file from my desktop to my android device. I thought of using rsync for this purpose, which is a tool that I use frequently to sync files between my desktop and my laptop.\u003c/p\u003e\n\u003cp\u003eI thought of giving it a try and came across \u003ca href=\"https://howtos.davidsebek.com/android-rsync-termux.html\"\u003ethis great article\u003c/a\u003e that explained just this.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNOTE: This guide requires both the computer and the Android device to be on the same wifi network.\u003c/strong\u003e\u003c/p\u003e","title":"Use SSH or Rsync With Android"},{"content":"Getting Started So I recently decided to get more involved in the Android world and came about a \u0026rsquo;new\u0026rsquo; type of OS, known as Ubuntu Touch. I thought a bit on it and decided to start the porting process for it for my device Realme GT Neo 2 [codenamed:bitra].\nI started with the official documentation of UBports where in they gave some good amount of introduction on how and why certain things needed to be done.\nThe guide mentions the use of GSI for devices with Android 8+ and, as my device is indeed treble supported, I think I will head to using GSI only.\nStandalone Kernel Method (Halium 9 and newer) is very interesting as it seems to be the least tiresome way for porting among all of the 3 mentioned methods. So I started with this and did the steps as mentioned in the guide.\nThe defconfig that i had to use is the sm8250_defconfig. Next i made a halium.config file as prompted.\nNext, i had to fill in the deviceinfo file. For this purpose, I used the Poco X3 Pro device branch as a dummy template and started filling stuff according to it and the guide.\nBut I got stuck on the deviceinfo_bootimg_prebuilt_dtb step as i was not sure where to find my dtb. So i asked this question in the telegram group of Ubports and was recommended to run a script on the boot.img which i had extracted.\nThe script was by LOS. It can be found here [use it through curl -O options]. And it worked! I was able to get the output from my boot.img using the script by running this command : python unpack_bootimg.py --boot_img boot.img\nThe script\u0026rsquo;s output in normal format.\nBut then, i was recommended to add the option --format mkbootimg along with the above command to get the outputed text in terms of mkbootimg arguments, as it would output the values that were expected for the deviceinfo file.\nUnfortunately for me though, adding that option to the command gave me an error : error: unrecognized arguments: --format mkbootimg\nI then thought and checked the latest LOS branch from where i had got that previous script. And i did find an updated script from LOS21 that did have those options that i needed for mkbootimg format. The new script can be found here\nAfter this, i ran the command again, now with the additional parameters to it and was indeed able to generate the output in mkbootimg format without any errors! The updated command : python unpack_bootimg.py --boot_img boot.img --format mkbootimg\nThe script\u0026rsquo;s output in mkbootimg format.\nThis has given me alot to work with now. I will be looking forward to progress even further and complete the deviceinfo file.\n","permalink":"https://krishnayadav.xyz/posts/ubuntu-touch-port-part-1/","summary":"\u003ch2 id=\"getting-started\"\u003eGetting Started\u003c/h2\u003e\n\u003cp\u003eSo I recently decided to get more involved in the Android world and came about a \u0026rsquo;new\u0026rsquo; type of OS, known as Ubuntu Touch. I thought a bit on it and decided to start the porting process for it for my device Realme GT Neo 2 [codenamed:bitra].\u003c/p\u003e\n\u003cp\u003eI started with the \u003ca href=\"https://docs.ubports.com/en/latest/porting/introduction/index.html\"\u003eofficial documentation of UBports\u003c/a\u003e where in they gave some good amount of introduction on how and why certain things needed to be done.\u003c/p\u003e","title":"Ubuntu Touch Port Part 1"},{"content":"Guide on how to extract a boot image from any Android phone [Requires Magisk and Computer]\nGetting started! Accessing and modifying system files on your device typically requires superuser permissions. To extract the boot image, we\u0026rsquo;ll need a root environment. We\u0026rsquo;ll achieve this by using Magisk.\nProcedure First, make sure you install TWRP and then flash Magisk through it. Setup Magisk in your phone. Connect your phone to your Computer and type adb shell [Ensure that you have adb setup properly]. Now, become root by typing su in the shell on your PC. Copy/Paste the following code in the shell. for PARTITION in \u0026#34;boot\u0026#34; \u0026#34;boot_a\u0026#34; \u0026#34;boot_b\u0026#34;; do BLOCK=$(find /dev/block \\( -type b -o -type c -o -type l \\) -iname \u0026#34;$PARTITION\u0026#34; -print -quit 2\u0026gt;/dev/null) if [ -n \u0026#34;$BLOCK\u0026#34; ]; then echo \u0026#34;$PARTITION\u0026#34; = $(readlink -f \u0026#34;$BLOCK\u0026#34;) fi done This command will display the boot partition paths for both A/B and A-only devices.\nNote: On A/B devices, the loop command will display the boot partition paths for both slots, something like this!\nboot_a = /dev/block/sda40 boot_b = /dev/block/sda41 In this case, you can extract the image corresponding to your currently active slot.To determine the active slot, enter the command getprop ro.boot.slot_suffix. If the output is _a, use the path for boot_a; otherwise, use the path for boot_b.\nFinally, use the following command to extract the image from the specified boot path: dd if=\u0026lt;boot_partition_path\u0026gt; of=\u0026lt;output_path\u0026gt; For example:\ndd if=/dev/block/mmcblk0p42 of=/sdcard/boot_a.img I hope this did work for you, as it did indeed work for me!\nCREDITS : Here\n","permalink":"https://krishnayadav.xyz/posts/boot-image-extraction-guide/","summary":"\u003cp\u003eGuide on how to extract a boot image from any Android phone [Requires Magisk and Computer]\u003c/p\u003e\n\u003ch2 id=\"getting-started\"\u003eGetting started!\u003c/h2\u003e\n\u003cp\u003eAccessing and modifying system files on your device typically requires superuser permissions. To extract the boot image, we\u0026rsquo;ll need a root environment. We\u0026rsquo;ll achieve this by using Magisk.\u003c/p\u003e\n\u003ch4 id=\"procedure\"\u003eProcedure\u003c/h4\u003e\n\u003col\u003e\n\u003cli\u003eFirst, make sure you install TWRP and then flash Magisk through it.\u003c/li\u003e\n\u003cli\u003eSetup Magisk in your phone.\u003c/li\u003e\n\u003cli\u003eConnect your phone to your Computer and type adb shell [Ensure that you have adb setup properly].\u003c/li\u003e\n\u003cli\u003eNow, become root by typing \u003cstrong\u003esu\u003c/strong\u003e in the shell on your PC.\u003c/li\u003e\n\u003cli\u003eCopy/Paste the following code in the shell.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e PARTITION in \u003cspan class=\"s2\"\u003e\u0026#34;boot\u0026#34;\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;boot_a\u0026#34;\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;boot_b\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nv\"\u003eBLOCK\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"k\"\u003e$(\u003c/span\u003efind /dev/block \u003cspan class=\"se\"\u003e\\(\u003c/span\u003e -type b -o -type c -o -type l \u003cspan class=\"se\"\u003e\\)\u003c/span\u003e -iname \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$PARTITION\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e -print -quit 2\u0026gt;/dev/null\u003cspan class=\"k\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e -n \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$BLOCK\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003ethen\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$PARTITION\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003e$(\u003c/span\u003ereadlink -f \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$BLOCK\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"k\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003efi\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003edone\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis command will display the boot partition paths for both A/B and A-only devices.\u003c/p\u003e","title":"Boot Image Extraction Guide"},{"content":"If you feel that my work has been valuable to you, I would greatly appreciate your support. Any contribution, big or small, helps me continue creating and sharing more meaningful content. Thank you for considering a donation!\nPaypal: Link UPI: obsidianmaximus@upi UPI QR code\nMonero:46Es9cwspxoY9hhYMy2mdGLwxpYouLWANaBVWiUhhjE37Mr1bB65cU4C9cLkCiaw3hWVaZij7xZs4DrPVUFxTPy5CCkVvsr Monero QR code\n","permalink":"https://krishnayadav.xyz/donate/","summary":"\u003cp\u003eIf you feel that my work has been valuable to you, I would greatly appreciate your support. Any contribution, big or small, helps me continue creating and sharing more meaningful content. Thank you for considering a donation!\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ePaypal: \u003cstrong\u003e\u003ca href=\"https://paypal.me/krishnayadavxyz\"\u003eLink\u003c/a\u003e\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003eUPI: \u003ccode\u003eobsidianmaximus@upi\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cfigure class=\"align-center \"\u003e\r\n    \u003cimg loading=\"lazy\" src=\"/upi.png#center\"\r\n         alt=\"UPI QR code\"/\u003e \u003cfigcaption\u003e\r\n            \u003cp\u003eUPI QR code\u003c/p\u003e\r\n        \u003c/figcaption\u003e\r\n\u003c/figure\u003e\r\n\n\u003cul\u003e\n\u003cli\u003eMonero:\u003ccode\u003e46Es9cwspxoY9hhYMy2mdGLwxpYouLWANaBVWiUhhjE37Mr1bB65cU4C9cLkCiaw3hWVaZij7xZs4DrPVUFxTPy5CCkVvsr\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cfigure class=\"align-center \"\u003e\r\n    \u003cimg loading=\"lazy\" src=\"/Monero.png#center\"\r\n         alt=\"Monero QR code\"/\u003e \u003cfigcaption\u003e\r\n            \u003cp\u003eMonero QR code\u003c/p\u003e\r\n        \u003c/figcaption\u003e\r\n\u003c/figure\u003e","title":"Donate"}]